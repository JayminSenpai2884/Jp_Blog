---
interface Props {
  url: string;
}

const { url } = Astro.props;
---

<div id="preview-modal" class="fixed inset-0 z-50 hidden" role="dialog" aria-modal="true" aria-labelledby="preview-title">
  <div class="absolute inset-0 bg-black/90 backdrop-blur-md" id="modal-backdrop" tabindex="-1"></div>
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <div id="glass-modal" class="glass-modal bg-gradient-to-br from-white/3 to-white/1 backdrop-blur-xl border border-white/5 shadow-xl rounded-xl w-full max-w-5xl h-[90vh] flex flex-col animate-elastic-in" tabindex="0">
      <div class="flex justify-between items-center p-1 border-b border-white/5">
        
        <button id="close-modal" class="text-gray-500 hover:text-white transition-colors duration-200 p-1.5 rounded-lg hover:bg-white/5" aria-label="Close preview">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="flex-1 overflow-hidden p-3">
        <div id="preview-content" class="h-full flex flex-col bg-white/1 rounded-lg">
          <div class="flex items-center gap-3 p-3 border-b border-white/3">
            <div class="w-6 h-6 bg-primary/15 rounded-md flex items-center justify-center">
              <svg class="h-3 w-3 text-primary" viewBox="0 0 24 24" fill="currentColor">
                <path d="M13.54 12a6.8 6.8 0 01-6.77 6.82A6.8 6.8 0 010 12a6.8 6.8 0 016.77-6.82A6.8 6.8 0 0113.54 12zm7.42 0c0 3.54-1.51 6.42-3.38 6.42-1.87 0-3.39-2.88-3.39-6.42s1.52-6.42 3.39-6.42 3.38 2.88 3.38 6.42M24 12c0 3.17-.53 5.75-1.19 5.75-.66 0-1.19-2.58-1.19-5.75s.53-5.75 1.19-5.75C23.47 6.25 24 8.83 24 12z"/>
              </svg>
            </div>
            <div class="flex-1">
              <h4 class="text-white font-montserrat font-medium text-base mb-0" id="preview-title-inner"></h4>
              <p class="text-gray-400 text-xs" id="preview-author"></p>
            </div>
          </div>
          <div class="flex-1 overflow-y-auto custom-scrollbar p-4">
            <div class="prose prose-invert max-w-none" id="preview-summary"></div>
          </div>
          <div class="p-3 border-t border-white/3">
            <div class="flex justify-between items-center">
              <p class="text-gray-500 text-xs">Read on Medium</p>
              <a id="read-more-link" href="" target="_blank" class="px-3 py-1.5 bg-primary/10 text-primary rounded-md hover:bg-primary/20 transition-colors duration-200 font-montserrat text-xs font-medium" tabindex="0">
                Read More
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  declare global {
    interface Window {
      openPreviewModal: (url: string) => void;
    }
  }

  const modal = document.getElementById('preview-modal');
  const modalBackdrop = document.getElementById('modal-backdrop');
  const closeButton = document.getElementById('close-modal');
  const previewTitle = document.getElementById('preview-title-inner');
  const previewAuthor = document.getElementById('preview-author');
  const previewSummary = document.getElementById('preview-summary');
  const readMoreLink = document.getElementById('read-more-link') as HTMLAnchorElement;
  let lastFocused: HTMLElement | null = null;

  // Focus trap
  function trapFocus(modalEl) {
    const focusable = modalEl.querySelectorAll('a, button, textarea, input, select, [tabindex]:not([tabindex="-1"])');
    const first = focusable[0];
    const last = focusable[focusable.length - 1];
    modalEl.addEventListener('keydown', (e) => {
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          if (document.activeElement === first) {
            e.preventDefault();
            (last as HTMLElement).focus();
          }
        } else {
          if (document.activeElement === last) {
            e.preventDefault();
            (first as HTMLElement).focus();
          }
        }
      }
    });
  }

  // Fade out on close
  function fadeOutModal() {
    const glass = document.getElementById('glass-modal');
    if (glass) {
      glass.classList.remove('animate-elastic-in');
      glass.classList.add('animate-fade-out');
      setTimeout(() => {
        if (modal) modal.classList.add('hidden');
        glass.classList.remove('animate-fade-out');
      }, 350);
    } else {
      if (modal) modal.classList.add('hidden');
    }
    document.body.style.overflow = '';
    if (lastFocused) lastFocused.focus();
  }

  async function fetchArticlePreview(url: string) {
    try {
      // Extract the article slug from the URL
      const slug = url.split('/').pop();
      if (!slug) throw new Error('Invalid URL');

      // Try multiple CORS proxy services as fallback
      const proxyServices = [
        `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`,
        `https://cors-anywhere.herokuapp.com/${url}`,
        `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(url)}`
      ];

      let response = null;
      let html = '';

      // Try each proxy service
      for (const proxyUrl of proxyServices) {
        try {
          response = await fetch(proxyUrl, {
            method: 'GET',
            headers: {
              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
            }
          });
          
          if (response.ok) {
            html = await response.text();
            break;
          }
        } catch (proxyError) {
          console.warn(`Proxy ${proxyUrl} failed:`, proxyError);
          continue;
        }
      }

      if (!html) {
        throw new Error('All proxy services failed');
      }
      
      // Create a temporary DOM element to parse the HTML
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');

      // Extract the article content
      const article = doc.querySelector('article');
      if (!article) throw new Error('Article not found');

      // Try to find the main story container
      let mainContent = article.querySelector('section');
      if (!mainContent) mainContent = article;

      // Remove unwanted elements (author, follow, meta, etc.)
      const selectorsToRemove = [
        '[data-testid="authorName"]',
        'header',
        'footer',
        'aside',
        'figure[role="presentation"]',
        'button',
        '[data-testid="storyFooter"]',
        '[data-testid="storyMeta"]',
        '[data-testid="socialReactions"]',
        '[data-testid="storyTitle"] + div',
        'svg',
        'hr',
        '.js-postMetaLockups',
        '.js-postField',
        '.js-postFooter',
        '.pw-post-body .pw-multi-image',
        '.pw-post-body .pw-multi-image__caption',
        '.pw-post-body .pw-multi-image__credit',
        '.pw-post-body .pw-multi-image__image img[alt=""]',
        '.pw-post-body .pw-multi-image__image img[role="presentation"]',
        '.pw-post-body .pw-multi-image__image figcaption',
      ];
      selectorsToRemove.forEach(sel => mainContent.querySelectorAll(sel).forEach(el => el.remove()));

      // If mainContent is now empty, fall back to the original article HTML
      let content = mainContent.innerHTML.trim();
      if (!content) content = article.innerHTML;

      // Extract the title
      const title = article.querySelector('h1')?.textContent || '';
      // Extract the author
      const author = article.querySelector('a[data-testid="authorName"]')?.textContent || 'Jaymin Parmar';

      return {
        title,
        author,
        content: cleanContent(content)
      };
    } catch (error) {
      console.error('Error fetching article preview:', error);
      return null;
    }
  }

  function cleanContent(content: string): string {
    // Create a temporary div to manipulate the content
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = content;

    // Remove unnecessary elements
    const elementsToRemove = tempDiv.querySelectorAll('script, style, iframe, .medium-feed-link, .medium-feed-snippet');
    elementsToRemove.forEach(el => el.remove());

    // Clean up images
    const images = tempDiv.querySelectorAll('img');
    images.forEach(img => {
      img.classList.add('rounded-lg', 'my-8', 'mx-auto', 'max-w-full', 'h-auto');
      // Remove any inline styles that might conflict
      img.removeAttribute('style');
    });

    // Clean up paragraphs
    const paragraphs = tempDiv.querySelectorAll('p');
    paragraphs.forEach(p => {
      p.classList.add('my-4', 'leading-relaxed');
      // Remove any inline styles
      p.removeAttribute('style');
    });

    // Clean up headings
    const headings = tempDiv.querySelectorAll('h1, h2, h3, h4, h5, h6');
    headings.forEach(h => {
      h.classList.add('font-bold', 'my-6');
      // Remove any inline styles
      h.removeAttribute('style');
    });

    // Clean up links
    const links = tempDiv.querySelectorAll('a');
    links.forEach(a => {
      a.classList.add('text-primary', 'hover:underline');
      // Remove any inline styles
      a.removeAttribute('style');
    });

    // Clean up blockquotes
    const blockquotes = tempDiv.querySelectorAll('blockquote');
    blockquotes.forEach(blockquote => {
      blockquote.classList.add('border-l-4', 'border-primary', 'pl-4', 'my-6', 'italic');
      // Remove any inline styles
      blockquote.removeAttribute('style');
    });

    return tempDiv.innerHTML;
  }

  async function openModal(url: string) {
    if (modal) {
      lastFocused = document.activeElement as HTMLElement;
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      // Trigger elastic animation
      const glass = document.getElementById('glass-modal');
      if (glass) {
        glass.classList.remove('animate-elastic-in');
        void glass.offsetWidth; // force reflow
        glass.classList.add('animate-elastic-in');
        trapFocus(glass);
        setTimeout(() => {
          (glass as HTMLElement).focus();
        }, 100);
      }
      // Skeleton loader
      if (previewSummary) {
        previewSummary.innerHTML = `
          <div class="skeleton-title mb-4"></div>
          <div class="skeleton-text mb-3"></div>
          <div class="skeleton-text mb-3"></div>
          <div class="skeleton-img mb-4"></div>
          <div class="skeleton-text mb-3"></div>
        `;
      }
      if (previewTitle) previewTitle.textContent = '';
      if (previewAuthor) previewAuthor.textContent = '';
      try {
        // Fetch the article preview
        const preview = await fetchArticlePreview(url);
        if (preview) {
          if (previewTitle) previewTitle.textContent = preview.title;
          if (previewAuthor) previewAuthor.textContent = preview.author;
          if (previewSummary) {
            previewSummary.innerHTML = `
              <div class="space-y-4">
                ${preview.content}
              </div>
            `;
          }
        } else {
          // Extract title from URL slug as fallback
          const urlSlug = url.split('/').pop()?.replace(/-/g, ' ') || '';
          const fallbackTitle = urlSlug.charAt(0).toUpperCase() + urlSlug.slice(1);
          
          if (previewTitle) previewTitle.textContent = fallbackTitle;
          if (previewAuthor) previewAuthor.textContent = 'Jaymin Parmar';
          if (previewSummary) {
            previewSummary.innerHTML = `
              <div class="text-center py-8">
                <div class="w-12 h-12 mx-auto mb-3 rounded-full bg-primary/10 flex items-center justify-center">
                  <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <h3 class="text-base font-medium text-white mb-1">Preview Unavailable</h3>
                <p class="text-gray-400 text-sm max-w-md mx-auto">
                  We couldn't load a preview of this article. Click "Read More" to view the full content on Medium.
                </p>
              </div>
            `;
          }
        }
      } catch (error) {
        if (previewSummary) {
          previewSummary.innerHTML = `
            <div class="text-center py-8">
              <div class="w-12 h-12 mx-auto mb-3 rounded-full bg-primary/10 flex items-center justify-center">
                <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <h3 class="text-base font-medium text-white mb-1">Preview Error</h3>
              <p class="text-gray-400 text-sm max-w-md mx-auto">
                There was an error loading the preview. Please click "Read More" to view the full article on Medium.
              </p>
            </div>
          `;
        }
      }
      if (readMoreLink) readMoreLink.href = url;
    }
  }

  function closeModal() {
    fadeOutModal();
  }

  // Close modal when clicking backdrop or close button
  modalBackdrop?.addEventListener('click', closeModal);
  closeButton?.addEventListener('click', closeModal);

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
      closeModal();
    }
  });

  // Make openModal function available globally
  window.openPreviewModal = openModal;
</script>

<style>
  @keyframes elastic-in {
    0% { opacity: 0; transform: scale(0.92); }
    60% { opacity: 1; transform: scale(1.03); }
    80% { transform: scale(0.98); }
    100% { opacity: 1; transform: scale(1); }
  }
  @keyframes fade-out {
    0% { opacity: 1; transform: scale(1); }
    100% { opacity: 0; transform: scale(0.96); }
  }
  .animate-elastic-in {
    animation: elastic-in 0.95s cubic-bezier(0.68,-0.55,0.27,1.55);
  }
  .animate-fade-out {
    animation: fade-out 0.35s cubic-bezier(0.4,0,0.2,1);
  }
  .glass-modal {
    background: rgba(255,255,255,0.02);
    box-shadow: 0 8px 32px rgba(0,0,0,0.4);
    border-radius: 12px;
    border: 1px solid rgba(255,255,255,0.05);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    outline: none;
  }
  /* Skeleton Loader */
  .skeleton-title {
    height: 2.2rem;
    width: 60%;
    background: linear-gradient(90deg, #23262d 25%, #2d323c 50%, #23262d 75%);
    border-radius: 0.5rem;
    animation: skeleton 1.2s infinite linear;
  }
  .skeleton-text {
    height: 1.1rem;
    width: 90%;
    background: linear-gradient(90deg, #23262d 25%, #2d323c 50%, #23262d 75%);
    border-radius: 0.5rem;
    animation: skeleton 1.2s infinite linear;
  }
  .skeleton-img {
    height: 180px;
    width: 100%;
    background: linear-gradient(90deg, #23262d 25%, #2d323c 50%, #23262d 75%);
    border-radius: 1rem;
    animation: skeleton 1.2s infinite linear;
  }
  @keyframes skeleton {
    0% { background-position: -200px 0; }
    100% { background-position: calc(200px + 100%) 0; }
  }
  /* Simplified Button Animation */
  .readmore-animate {
    transition: all 0.2s ease;
  }
  
  .readmore-animate:hover, .readmore-animate:focus {
    transform: translateY(-1px);
  }
  #preview-modal {
    transition: opacity 0.3s ease-in-out;
    font-family: 'Montserrat', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif;
  }

  #preview-modal * {
    font-family: inherit;
  }

  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(52, 152, 219, 0.2) transparent;
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: rgba(52, 152, 219, 0.2);
    border-radius: 4px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background-color: rgba(52, 152, 219, 0.3);
  }

  .bg-gradient-to-br {
    background: linear-gradient(135deg, #181c24 0%, #23262d 100%);
  }

  .border-white\/10 {
    border-color: rgba(255,255,255,0.10);
  }

  .shadow-2xl {
    box-shadow: 0 8px 32px 0 rgba(52,152,219,0.15), 0 1.5px 4px 0 rgba(0,0,0,0.10);
  }

  .rounded-2xl {
    border-radius: 1.25rem;
  }

  .prose {
    color: #e5e5e5;
    font-size: 1rem;
    line-height: 1.6;
    font-family: 'Montserrat', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif;
    letter-spacing: -0.005em;
    word-break: break-word;
    font-weight: 400;
  }

  .prose img {
    margin: 1rem auto;
    border-radius: 0.5rem;
    box-shadow: 0 2px 8px 0 rgba(52,152,219,0.08);
  }

  .prose p {
    margin: 0.75rem 0;
    line-height: 1.6;
    color: #e5e5e5;
    font-size: 0.95rem;
    font-weight: 400;
    letter-spacing: -0.005em;
  }

  .prose h1 {
    font-size: 1.4rem;
    margin-top: 1.25rem;
    margin-bottom: 0.75rem;
    color: #fff;
    font-weight: 600;
    letter-spacing: -0.005em;
  }

  .prose h2 {
    font-size: 1.15rem;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #fff;
    font-weight: 600;
    letter-spacing: -0.005em;
  }

  .prose h3 {
    font-size: 1.05rem;
    margin-top: 0.75rem;
    margin-bottom: 0.25rem;
    color: #fff;
    font-weight: 600;
  }

  .prose a {
    color: #3498db;
    text-decoration: none;
    transition: color 0.2s;
    font-weight: 500;
  }

  .prose a:hover {
    color: #5dade2;
    text-decoration: underline;
  }

  .prose blockquote {
    font-size: 0.95rem;
    margin: 1rem 0;
    padding: 0.6rem 0 0.6rem 1rem;
    border-radius: 0.4rem;
  }

  .prose ul, .prose ol {
    margin: 0.75rem 0;
    padding-left: 1.2rem;
  }

  .prose li {
    margin: 0.25rem 0;
    font-size: 0.95rem;
  }

  .prose code {
    font-size: 0.98em;
    padding: 0.18rem 0.36rem;
  }

  .prose pre {
    font-size: 0.98em;
    padding: 0.8rem;
    margin: 1.1rem 0;
    border-radius: 0.6rem;
  }

  .prose strong {
    color: #fff;
    font-weight: 600;
  }

  .prose em {
    color: #b2becd;
  }

  /* Modal header and button styles */
  .text-primary {
    color: #3498db;
  }

  .bg-primary {
    background-color: #3498db;
  }

  .hover\:bg-primary\/90:hover {
    background-color: #217dbb;
  }

  .rounded-full {
    border-radius: 9999px;
  }

  .font-montserrat {
    font-family: 'Montserrat', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif;
  }

  .font-bold {
    font-weight: 700;
  }

  .font-semibold {
    font-weight: 600;
  }

  .transition-colors {
    transition: color 0.2s, background 0.2s;
  }

  .px-6 {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }

  .py-2 {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .mt-6 {
    margin-top: 1.5rem;
  }

  .pt-6 {
    padding-top: 1.5rem;
  }

  .mb-8 {
    margin-bottom: 2rem;
  }

  .space-y-4 > :not([hidden]) ~ :not([hidden]) {
    margin-top: 1rem;
  }

  /* Simplified focus states */
  #close-modal:focus,
  #read-more-link:focus {
    outline: 1px solid rgba(52, 152, 219, 0.4);
    outline-offset: 1px;
  }

  /* Minimal scrollbar styling */
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(52, 152, 219, 0.2);
    border-radius: 4px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(52, 152, 219, 0.3);
  }
</style> 